Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537 distinct user IDs and 3979 distinct business IDs (No Primary Key)
ix. User = 10000
x. Friend = 
xi. Elite_years =

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer: 	SELECT COUNT(id) 		-- count number of obsevations
					FROM user  		-- specify table
					WHERE 	id IS NULL 	-- filter data to count number of observations where any column is null
						OR name IS NULL 
						OR review_count IS NULL 
						OR yelping_since IS NULL 
						OR useful IS NULL 
						OR funny IS NULL 
						OR cool IS NULL 
						OR fans IS NULL 
						OR average_stars IS NULL 
						OR compliment_hot IS NULL 
						OR compliment_more IS NULL 
						OR compliment_profile IS NULL 
						OR compliment_cute IS NULL 
						OR compliment_list IS NULL 
						OR compliment_note IS NULL 
						OR compliment_plain IS NULL 
						OR compliment_cool IS NULL 
						OR compliment_funny IS NULL 
						OR compliment_writer IS NULL 
						OR compliment_photos IS NULL

	

	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:	3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg:	3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:	0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:	1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:	24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:  	select 	city
					        	,sum(review_count) as total_review			                -- summing up the reviews
					from 	business 							-- table to select
					Group by  city 							-- to get a summary by cities
					order by   total_review desc; 						-- ordered in descendin order
	
	
	Copy and Paste the Result Below:
+------------------------------	+------------------------------+
| city          	 |   total_review 	|
+------------------------------	+------------------------------	+
| Las Vegas	|        82854 	|
| Phoenix		|        34503	|
| Toronto         	|        24113 	|
| Scottsdale     	|        20614 	|
| Charlotte       	|        12523 	|
| Henderson    	|        10871 	|
| Tempe           	|        10504 	|
| Pittsburgh     	|         9798 	|
| Montréal        	|         9448 	|
| Chandler       	|         8112 	|
| Mesa             	|         6875 	|
| Gilbert           	|         6380 	|
| Cleveland      	|         5593 	|
| Madison        	|         5265 	|
| Glendale        	|         4406 	|
| Mississauga   	|         3814 	|
| Edinburgh     	|         2792 	|
| Peoria            	|         2624 	|
| North Las Vegas 	|         2438 	|
| Markham         	|         2352 	|
| Champaign       	|         2029 	|
| Stuttgart       	|         1849 	|
| Surprise        	|         1520 	|
| Lakewood        	|         1465 	|
| Goodyear        	|         1155 	|
+------------------------------	+------------------------------	+
(Output limit exceeded, 25 of 362 total rows shown)

	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer: 	SELECT 	stars
		    		 	,count(id) AS num_businesses  --count number of businesses
				FROM business
				WHERE city='Avon'
				GROUP BY stars   --aggregate by star ratings
				ORDER BY stars Asc;


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+--------------------------------------+
| stars | num_businesses	 |
+-------+--------------------------------------+
|   1.5 |              1		 |
|   2.5 |              2		 |
|   3.5 |              3		 |
|   4.0 |              2		 |
|   4.5 |              1		 |
|   5.0 |              1		 |
+-------+--------------------------------------+


ii. Beachwood

SQL code used to arrive at answer: 	SELECT 	stars
		    		 	,count(id) AS num_businesses  --count number of businesses
				FROM business
				WHERE city='Beachwood'
				GROUP BY stars   --aggregate by star ratings
				ORDER BY stars Asc;


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------------------------------------+
| stars | num_businesses	 |
+-------+--------------------------------------+
|   2.0 |              1		 |
|   2.5 |              1		 |
|   3.0 |              2 		 |
|   3.5 |              2 		 |
|   4.0 |              1		 |
|   4.5 |              2		 |
|   5.0 |              5		 |
+-------+--------------------------------------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer: 
					SELECT     name
						,id
						,review_count
					FROM user
					ORDER BY review_count DESC
					LIMIT 3;
	
		
	Copy and Paste the Result Below: 
+------------------------------	+----------------------------------------------+------------------------------+
| name         	| id                     		| review_count 	|
+------------------------------	+----------------------------------------------	+------------------------------+
| Sonnenschein1 	| -61V4ZkRsKUChYFZtdZDvQ 	|            0 		|
| svenher      	| -9TyYbKtEz-pxeZyLICOgA 	|            0 		|
| Schweinefe    	| -arJ-0bq2eycINnHrm0LFA 	|            0 		|
+------------------------------	+----------------------------------------------	+------------------------------+

		


8. Does posing more reviews correlate with more fans?

Yes, posing more reviews is positively correlated with more fans, and the reason of this correaltion is the yelping period. A clear pattern can be viewed as when the yelping period is more, there are more fans review and ultimately more collective reviews.

	Please explain your findings and interpretation of the results: 

	 	SELECT id,
			   name,
			   review_count,
			   fans,
			   (strftime('%Y','NOW') - strftime('%Y',yelping_since)) AS YEAR_SPAN
		FROM user
		ORDER BY YEAR_SPAN DESC, FANS DESC;
+-----------------------------------------------+---------------------------------------------+-------------------------------+------------------------------+------------------------------+
|               id                     	| 	name      		|     review_count 	|  	 fans    	|     YEAR_SPAN 	|
+-----------------------------------------------+---------------------------------------------+-------------------------------+------------------------------+------------------------------+
| -3i9bhfvrM3F1wsC9XIB8g 	|	Linda		|	584	|	89	|        14		|
| -34NV3A5a5gcL-s8UH4KbA 	| 	Annie		|          	651 	|   	52 	|        14 		|
| -eVlHbM2KRZQnBqfTXtDvw 	| 	Joc		|         	652 	|   	49 	|        14 		|
| -cM9FQWp3-uu53Os983yCw 	| 	Sarah		|          	278 	|   	41 	|        14 		|
| -9CxMilArd4h1h-je5WkHQ 	| 	Trish		|          	354 	|   	13 	|        14 		|
| -kF4NedSmOrUE1wWudoevg 	| 	Stacy       		|          	118 	|   	13 	|        14 		|
| -deQ6hSaz3b_mDR888-N9g 	| 	Sam        		|          	115 	|   	12 	|        14 		|
| -gJJzPghhC_gwHT-D8wlKQ 	| 	C          	 	|          	515 	|  	12 	|        14 		|
| -0Nvk7jIo79LaxChQtDyLA 	| 	Alex        		|          	 75  	|    	  8 	|        14 		|
| -4R8Jo83-4-mnUvqErtfoQ 	| 	Kelly       		|          	 71  	|  	  4 	|        14 		|
| -a9IN_IZSLphqDCq5r1DUw 	| 	T          		|           	 40  	|   	  3 	|        14 		|
| -75NS6UdFYg1H5SsIBRcGQ 	| 	Robert    		|            	  4	| 	  1 	|         14 		|
| -2gXEqxgWKo-yVxr5x9XMg 	| 	Marc       		|          	 14	|   	  0 	|         14 		|
| -DFCC64NXgqrxlO8aLU5rg 	| 	Roanna   		|             1039	|              104 	|        13 		|
| -K2Tcgh2EKX6e6HqqIrBIQ 	| .	Hon       		|             1246 	|              101 	|        13 		|
| -KFjONqNDuBfKDeKAoA-bg 	| 	Koizumi  		|          	160 	| 	 73 	|        13 		|
| -HXpF9E-YwE0g-mInWSRuA 	| 	Jenn       		|          	657 	|	 62 	|        13 		|
| -hKniZN2OdshWLHYuj21jQ 	| 	Nicole     		|          	864 	| 	 43 	|        13 		|
| -3k65IY08ckDcOGQmf8BDg 	| 	Lynda     		|          	483 	|  	 34 	|        13 		|
| -IXvYa3uAcr68TeI0RzfWA 	| 	Andy      		|          	324 	|  	 26 	|        13 		|
| -E1apPrfMRcK8UhyObOFng 	| 	Stacy      		|         	219 	|  	 24 	|        13 		|
| -40hChgdlI5clkagmyoh5g 	| 	Karen     		|          	435 	|  	 21 	|        13 		|
| -bT32tHNq7ngqZNA4Tr8jA 	| 	Fancypants 	|      	472 	|  	 15 	|        13 		|
| -aAgfEUH4UoFDRXZCfJSUA 	| 	Matt       		|          	476 	|  	 14 	|        13 		|
| -kuyXi1FKIpsV1CsXGQu4g 	| 	Brian      		|          	131 	|   	 14 	|        13 		|
+-----------------------------------------------+---------------------------------------------+-------------------------------+------------------------------+------------------------------+
(Output limit exceeded, 25 of 10000 total rows shown)
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, love = 1780 and hate = 232

	
	SQL code used to arrive at answer:

				--1)  --love count
				SELECT count(text) as love
				FROM review
				where text like '%love%'; 
					+------+
					| love |
					+------+
					| 1780 |
					+------+
				
				--2)  --hate count
				SELECT count(text) as hate
				FROM review
				where text like '%hate%';
					+------+
					| hate |
					+------+
					|  232 |
					+------+



	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer: 	SELECT	name, 
			   			review_count,
			  			fans
					FROM user	-- table user
					order by fans desc 	--top fans
					limit 10;		--top 10 fans			
		
	
	
	Copy and Paste the Result Below:
+------------------------------+------------------------------+--------+
| name      	|    review_count 	| fans |
+------------------------------+------------------------------+--------+
| Amy       	|          609	|  503 |
| Mimi      		|          968 	|  497 |
| Harald    	|         1153 	|  311 |
| Gerald    	|         2000 	|  253 |
| Christine 	|          930	|  173 |
| Lisa      		|          813 	|  159 |
| Cat       		|          377 	|  133 |
| William   	|         1215	|  126 |
| Fran      		|          862 	|  124 |
| Lissa     		|          834	|  120 |
+------------------------------+------------------------------+--------+

	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
select  name,
        fans,
        useful,
        funny,
        (strftime('%Y', 'NOW') - strftime('%Y', yelping_since)) as span
        
from user
ORDER BY fans desc
limit 10;

	
	
	Copy and Paste the Result Below:
+--------------+--------+-----------+-----------+---------+
| name      | fans | useful |  funny | span |
+--------------+--------+------------+-----------+--------+
| Amy       |  503 |   3226  |    2554 |    12  |
| Mimi      |  497 |    257   |      138 |     8  |
| Harald    |  311 | 122921 | 122419 |     7  |
| Gerald    |  253 |  17524  |    2324 |     7  |
| Christine|  173 |   4834   |    6646 |   10  |
| Lisa        |  159 |     48    |       13 |   10  |
| Cat	|  133 |   1062   |     672 |   10  |
| William  |  126 |   9363   |    9361 |    4  |
| Fran       |  124 |   9851   |    7606 |    7  |
| Lissa      |  120 |    455    |     150 |   12  |
+--------------+--------+------------+-----------+--------+
	
	
	Please explain your findings and interpretation of the results:

	If the user "Harald" being pulled out of this table, (AS an outlier), the usefull and funy would show the medium relationship (25% to 75%) with fans.
	When the fans are increasing, useful and funny are also increasing and vice versa so a clear positive relationship.


	
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

 The 4-5 star group seems to have shorter hours then the 2-3 star group

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes and no, one of the 4-5 star group has a lot more reviews but then the other 4-5 star group has close to the same number of reviews as the 2-3 star group
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No, most of the businesses are from a different zip-code. However, few of the buisness has same postal code, but unfortunately, no specific analysis could be found due to less data for the analysis.

SQL code used for analysis:
-- select required colums for analysis

select  b.name,            			
        b.review_count,
        b.postal_code, 
        h.hours,

-- here case is made so that difference can be found if hours are different or not       
        case	
	 when hours like "%monday%" then 1
	 when hours like "%tuesday%" then 2
	 when hours like "%wednesday%" then 3
	 when hours like "%thursday%" then 4
	 when hours like "%friday%" then 5
	 when hours like "%saturday%" then 6
	 when hours like "%sunday%" then 7
        end as ord,

 -- devide the stars in categories of 2-3 and 4-5

        case when b.stars between 2 and 3 then '2-3 stars'
               when b.stars between 4 and 5 then '4-5 stars'
        end as star_rating

 -- joining three tables with foriegn keys

from    ((business b inner join hours h on b.id = h.business_id) 
                     inner join category c on b.id = c.business_id)

-- putting conditions to select only one category and city and one rating between these two.
          
where   (b.city == 'Las Vegas') and (c.category LIKE 'shopping') 
		    and (b.stars between 2 and 3) or (b.stars between 4 and 5)

-- grouping by stars and ord

group by stars, ord

-- ordered by ord and star_rating

order by ord,star_rating desc;

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         			Open:   AVG(review_count) = 31.757
			Closed: AVG(review_count0 = 23.198
         
ii. Difference 2:
         
         			Open:   AVG(stars) = 3.679
			Closed: AVG(stars) = 3.520
         
SQL code used for analysis:

SELECT 		COUNT(is_open),
		AVG(review_count),
		 AVG(stars),
 		is_open
FROM business
GROUP BY is_open;

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

Under this analysis, I choosed to analyze following: 
1) Which postal_code has most number of the business vendors?
2) What are there average ratings of those businesses which they have recieved from the customers? 
3) How eventually is postal code affecting the total_review_ count?
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

The reason behind this findings was follwoing:
1) To find those postal codes area, where scope of improvement is required. Analysis clearly says that postal codes where there is less number of businesses, the average stars is good mostly. So We should either apprach these busienss and the customers of that specific region and conduct a survey asking few question about their business and areas respectively?
2) There is positive realtion between number od business and ratings and negative relation between the average stars given by the people. So it is clearly shown that businesses will not grow where there are more business, it could also hamper the image of their business due to competition. 
                  
iii. Output of your finished dataset:

+---------------------------------+----------------------+-------------------+---------------+
| sum(b.review_count) |    avg(stars)    | postal_code | count 	|
+---------------------------------+----------------------+--------------------+--------------+
|               22352 	   | 3.58181818182 | 89109       |   165 	|
|                7371 	   | 3.95378151261 | 85251       |   119 	|
|                5609 	   | 3.72321428571 | 85281       |   112 	|
|                5707 	   | 3.53240740741 | 89119       |   108 	|
|                2526 	   | 3.87735849057 | 85260       |   106 	|
|                5977           | 3.59239130435 | 89102       |    92 	|	
|                1938 	   | 3.59302325581 | 85032       |    86 	|
|                4411  	   | 3.70238095238 | 89103       |    84 	|
|                3421 	   |  3.7987804878 | 85016       |    82 	|
|                3949 	   | 3.97297297297 | 89146       |    74 	|
|                3246 	   | 4.02739726027 | 85254       |    73 	|
|                2949 	   | 3.67808219178 | 89117       |    73 	|
|                1663 	   | 4.06338028169 | 89118       |    71 	|
|                3166 	   |           3.7        | 89014       |    70 	|
|                1978 	   | 3.71739130435 | 85308       |    69 	|
|                1785 	   | 3.53731343284 | 85282       |    67 	|
|                2557 	   | 4.20769230769 | 89147       |    65 	|
|                2500 	   |      3.796875     | 89123       |    64 	|
|                3086 	   | 3.93650793651 | 89052       |    63 	|
|                2408 	   | 3.66666666667 | 85226       |    60 	|
|                1586 	   |           3.8        | 89104       |    60 	|
|                6427 	   | 3.83962264151 | 89101       |    53 	|
|                1783 	   |          3.75       | 85225       |    50 	|
|                1784 	   | 3.52040816327 | 85224       |    49 	|
|                1201 	   |       3.59375     | 28277       |    48 	|
+---------------------------------+----------------------+----------------+-------------------+
(Output limit exceeded, 25 of 2564 total rows shown)

iv. Provide the SQL code you used to create your final dataset:

select sum(b.review_count), avg(stars), count(postal_code) as count, postal_code
from business b 
group by postal_code
order by count desc;